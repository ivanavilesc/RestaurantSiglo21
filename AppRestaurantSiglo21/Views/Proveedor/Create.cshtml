@model AppRestaurantSiglo21.Models.PROVEEDOR


@{
    ViewBag.Title = "Create";
    Layout = Session["Layout"].ToString();
}
<div class="container">
    <div class="card text-center">
        <div class="card-body">
            <h4>Crear Proveedor</h4>
        </div>
    </div>
    <br />

    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "createForm" }))
    {
        @Html.AntiForgeryToken()
        <div class="container">


            <div class="form-horizontal">
                <h4>MANTENEDOR PROVEEDORES</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group ">
                    <div class="col-10">
                        <label for="RUTDV">RUT</label>
                        <input type="text" required oninput="checkRut(this)" class="form-control" id="RUTDV" name="RUTDV" placeholder="8 dígitos mas guión, ej: 99999999-9">
                    </div>
                </div>

                <input type="hidden" id="RUTPROVEEDOR" name="RUTPROVEEDOR" value="1" />
                <input type="hidden" id="DVPROVEEDOR" name="DVPROVEEDOR" value="3" />

                <div class="form-group">
                    Nombre Proveedor
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NOMPROV, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.NOMPROV, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    Fono
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.FONO, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.FONO, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    Tipo Proveedor
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DESCTIPOPROVEEDOR, new { htmlAttributes = new { @class = "form-control", @required = "required" } })
                        @Html.ValidationMessageFor(model => model.DESCTIPOPROVEEDOR, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    Estado Proveedor
                    <div class="col-md-4">
                        @Html.DropDownListFor(model => model.IDESTPROVEEDOR, new SelectList(ViewBag.EstadoProveedor1, "Value", "Text"), htmlAttributes: new { @class = "form-control combo2 required", @id = "idEstPropuesta", @data_val = "true", @data_val_required = "choose is a required field" })
                        @*@Html.DropDownListFor(model => model.IDESTPROVEEDOR, new SelectList(ViewBag.EstadoProveedor1, "Value", "Text"), htmlAttributes: new { @class = "form-control", @id = "idEstPropuesta" })*@
                        @Html.ValidationMessageFor(model => model.IDESTPROVEEDOR, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="form-group">
                    <div class="row">
                        <div class="col-md-offset-2 col-md-10">
                            <button onclick="ansValidation(event)" type="button" class="btn btn-lg btn-primary btn-block">Guardar</button>
                        </div>
                    </div>
                    <div>

                    </div>
                </div>
            </div>
            <div>
                @Html.ActionLink("Volver atrás", "Index", null, new { @class = "btn btn-secondary" })
            </div>
        </div>

        <script src="~/Scripts/jquery.validate.min.js"></script>
        <script src="~/Scripts/jquery-1.10.2.min.js"></script>
        <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    }

</div>

<script>
    function ansValidation(ev) {
        ev.preventDefault        
        var nameValue = document.getElementById("NOMPROV").value
        var rutValue = document.getElementById("RUTDV").value        
        //var listaValue = document.getElementById("ListaRoles").value
        // the typeof operator returns a string.
        if (typeof nameValue !== "string")
        {
            event.preventDefault();
            window.alert("Tu nombre tiene un formato inválido")
            // we use strict validation ( !== ) because it's a good practice.
        } else if (typeof nameValue == "") {
            event.preventDefault();
            window.alert("Tu nombre tiene un formato inválido")
            // we use strict validation ( !== ) because it's a good practice.
        }else if (rutValue === "")
        {
            event.preventDefault();
            window.alert("No ingresaste el RUT, este campo es obligatorio !")
        } else {
            let form = document.getElementById('createForm');
            form.submit()
        }
    }
</script>

<script>
    function checkRut(RUTDV) {
        // Despejar Puntos
        var valor = RUTDV.value.replace('.', '');
        // Despejar Guión
        valor = valor.replace('-', '');

        // Aislar Cuerpo y Dígito Verificador
        cuerpo = valor.slice(0, -1);
        dv = valor.slice(-1).toUpperCase();

        // Formatear RUN
        RUTDV.value = cuerpo + '-' + dv

        // Si no cumple con el mínimo ej. (n.nnn.nnn)
        if (cuerpo.length < 7) { RUTDV.setCustomValidity("RUT Incompleto"); return false; }

        // Calcular Dígito Verificador
        suma = 0;
        multiplo = 2;

        // Para cada dígito del Cuerpo
        for (i = 1; i <= cuerpo.length; i++) {

            // Obtener su Producto con el Múltiplo Correspondiente
            index = multiplo * valor.charAt(cuerpo.length - i);

            // Sumar al Contador General
            suma = suma + index;

            // Consolidar Múltiplo dentro del rango [2,7]
            if (multiplo < 7) { multiplo = multiplo + 1; } else { multiplo = 2; }

        }

        // Calcular Dígito Verificador en base al Módulo 11
        dvEsperado = 11 - (suma % 11);

        // Casos Especiales (0 y K)
        dv = (dv == 'K') ? 10 : dv;
        dv = (dv == 0) ? 11 : dv;

        // Validar que el Cuerpo coincide con su Dígito Verificador
        if (dvEsperado != dv) { RUTDV.setCustomValidity("RUT Inválido"); return false; }

        // Si todo sale bien, eliminar errores (decretar que es válido)
        RUTDV.setCustomValidity('');
    }
</script>